import React, {useCallback, useEffect} from 'react'
import {Card, CardBody, Col, Collapse, CustomInput, Row} from 'reactstrap'
import {useState} from 'react'
import {ChevronDown, ChevronRight} from 'react-feather'

const PROFILE_SETTINGS = [
  {
    value: 'group_name_url',
    label: 'Name and URL only',
    childs: [],
    type: 'radio',
  },
  {
    value: 'group_detail_profile',
    label: 'Chi tiết profile',
    type: 'radio',
    childs: [
      {
        value: 'group_profile_info',
        label: 'Thông tin cơ bản',
        type: 'checkbox',
      },
      {
        value: 'group_list_friends',
        label: 'Danh sách bạn bè',
        type: 'checkbox',
      },
      {
        value: 'group_list_profile_posts',
        label: 'Danh sách bài viết trong trang cá nhân',
        type: 'checkbox',
      },
    ],
  },
]

const POST_EXPLOITED_SETTINGS = [
  {
    value: 'group_post_user',
    label: 'Người đăng',
    type: 'checkbox',
  },
  {
    value: 'group_post_content',
    label: 'Nội dung',
    type: 'checkbox',
  },
  {
    value: 'group_post_statistic',
    label: 'Thống kê tương tác',
    type: 'checkbox',
  },
  {
    value: 'group_post_reactors',
    label: 'Reactors',
    type: 'checkbox',
    is_show_parent: true,
    sub_childs: PROFILE_SETTINGS,
  },
  {
    value: 'group_post_commentors',
    label: 'Commentors',
    type: 'checkbox',
    is_show_parent: true,
    sub_childs: PROFILE_SETTINGS,
  },
]

const INITIALSTATE = {
  parents: ['group_info'],
  childrens: {
    group_list_members: '',
    group_list_posts: [],
  },
  childs: {
    group_list_members: {
      group_detail_profile: [],
    },
    group_list_posts: {
      group_limit_time: '',
      group_limit_count: '',
      group_post_detail: [],
    },
  },
  subChilds: {
    group_post_reactors: '',
    group_post_commentors: '',
  },
  subSubChilds: {
    group_post_reactors: {
      group_detail_profile: [],
    },
    group_post_commentors: {
      group_detail_profile: [],
    },
  },
}

const PostSetting = () => {
  const [collapseChilds, setCollapseChilds] = useState([])

  // ** State **
  const [childs, setChilds] = useState(INITIALSTATE.childs)
  const [subChilds, setSubChilds] = useState(INITIALSTATE.subChilds)
  const [subSubChilds, setSubSubChilds] = useState(INITIALSTATE.subSubChilds)

  const handleShowMoreChilds = useCallback(value => {
    setCollapseChilds(collapses =>
      collapses.includes(value)
        ? collapses.filter(cl => cl !== value)
        : [...collapses, value],
    )
  }, [])

  const handleChild = (parentValue, childrenValue, childValue, type) => {
    if (type === 'checkbox') {
      return setChilds(childs =>
        childs[parentValue][childrenValue].includes(childValue)
          ? {
              ...childs,
              [parentValue]: {
                ...childs[parentValue],
                [childrenValue]: childs[parentValue][childrenValue].filter(
                  v => v !== childValue,
                ),
              },
            }
          : {
              ...childs,
              [parentValue]: {
                ...childs[parentValue],
                [childrenValue]: [
                  ...childs[parentValue][childrenValue],
                  childValue,
                ],
              },
            },
      )
    } else {
      return setChilds(childs => ({
        ...childs,
        [parentValue]: {...childs[parentValue], [childrenValue]: childValue},
      }))
    }
  }

  const handleSubChild = (childValue, subChildValue) => {
    return setSubChilds(subChilds => ({
      ...subChilds,
      [childValue]: subChildValue,
    }))
  }

  const handleSubSubChild = (childValue, subChildValue, subSubChildValue) => {
    return setSubSubChilds(subSubChilds => ({
      ...subSubChilds,
      [childValue]: {
        ...subSubChilds[childValue],
        [subChildValue]: subSubChilds[childValue][subChildValue].includes(
          subSubChildValue,
        )
          ? subSubChilds[childValue][subChildValue].filter(
              v => v !== subSubChildValue,
            )
          : [...subSubChilds[childValue][subChildValue], subSubChildValue],
      },
    }))
  }

  // ****************** NGOÀI VÀO TRONG ************************

  // *** Select CHILD => auto select SUBCHILD
  useEffect(() => {
    // *** Tự động check Name and URL only cho Reactors
    if (
      childs['group_list_posts']['group_post_detail'].includes(
        'group_post_reactors',
      ) &&
      subChilds['group_post_reactors'] === ''
    ) {
      setSubChilds(subChilds => ({
        ...subChilds,
        group_post_reactors: 'group_name_url',
      }))
    }
    if (
      !childs['group_list_posts']['group_post_detail'].includes(
        'group_post_reactors',
      ) &&
      !(subChilds['group_post_reactors'] === '')
    ) {
      setSubChilds(subChilds => ({...subChilds, group_post_reactors: ''}))
    }

    // *** Tự động check Name and URL only cho Commentors
    if (
      childs['group_list_posts']['group_post_detail'].includes(
        'group_post_commentors',
      ) &&
      subChilds['group_post_commentors'] === ''
    ) {
      setSubChilds(subChilds => ({
        ...subChilds,
        group_post_commentors: 'group_name_url',
      }))
    }

    if (
      !childs['group_list_posts']['group_post_detail'].includes(
        'group_post_commentors',
      ) &&
      !(subChilds['group_post_commentors'] === '')
    ) {
      setSubChilds(subChilds => ({...subChilds, group_post_commentors: ''}))
    }
  }, [childs])

  // *** Select SUBCHILD => auto select SUBSUBCHILD
  useEffect(() => {
    if (
      subChilds['group_post_reactors'] === 'group_detail_profile' &&
      subSubChilds['group_post_reactors']['group_detail_profile'].length === 0
    ) {
      setSubSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_reactors: {group_detail_profile: ['group_profile_info']},
      }))
    }

    if (
      subChilds['group_post_reactors'] !== 'group_detail_profile' &&
      subSubChilds['group_post_reactors']['group_detail_profile'].length > 0
    ) {
      setSubSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_reactors: {group_detail_profile: []},
      }))
    }

    if (
      subChilds['group_post_commentors'] === 'group_detail_profile' &&
      subSubChilds['group_post_commentors']['group_detail_profile'].length === 0
    ) {
      setSubSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_commentors: {group_detail_profile: ['group_profile_info']},
      }))
    }

    if (
      subChilds['group_post_commentors'] !== 'group_detail_profile' &&
      subSubChilds['group_post_commentors']['group_detail_profile'].length > 0
    ) {
      setSubSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_commentors: {group_detail_profile: []},
      }))
    }
  }, [subChilds])

  // ******************  TRONG RA NGOÀI ********************

  // *** Select SUBCHILD => auto select CHILD
  useEffect(() => {
    if (
      subChilds['group_post_reactors'] !== '' &&
      !childs['group_list_posts']['group_post_detail'].includes(
        'group_post_reactors',
      )
    ) {
      setChilds(childs => ({
        ...childs,
        group_list_posts: {
          ...childs['group_list_posts'],
          group_post_detail: [
            ...childs['group_list_posts']['group_post_detail'],
            'group_post_reactors',
          ],
        },
      }))
    }

    if (
      subChilds['group_post_commentors'] !== '' &&
      !childs['group_list_posts']['group_post_detail'].includes(
        'group_post_commentors',
      )
    ) {
      setChilds(childs => ({
        ...childs,
        group_list_posts: {
          ...childs['group_list_posts'],
          group_post_detail: [
            ...childs['group_list_posts']['group_post_detail'],
            'group_post_commentors',
          ],
        },
      }))
    }
  }, [subChilds])

  // *** Select SUBSUBCHILD => auto select SUBCHILD
  useEffect(() => {
    // *** Tự động check Reactors
    if (
      subSubChilds['group_post_reactors']['group_detail_profile'].length > 0 &&
      subChilds['group_post_reactors'] !== 'group_detail_profile'
    ) {
      setSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_reactors: 'group_detail_profile',
      }))
    }

    // *** Tự động bỏ check Reactors
    if (
      subSubChilds['group_post_reactors']['group_detail_profile'].length ===
        0 &&
      subChilds['group_post_reactors'] !== ''
    ) {
      setSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_reactors: 'group_name_url',
      }))
    }

    // *** Tự động check Commentors
    if (
      subSubChilds['group_post_commentors']['group_detail_profile'].length >
        0 &&
      subChilds['group_post_commentors'] !== 'group_detail_profile'
    ) {
      setSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_commentors: 'group_detail_profile',
      }))
    }

    // *** Tự động bỏ check Commentors
    if (
      subSubChilds['group_post_commentors']['group_detail_profile'].length ===
        0 &&
      subChilds['group_post_commentors'] !== ''
    ) {
      setSubChilds(subSubChilds => ({
        ...subSubChilds,
        group_post_commentors: 'group_name_url',
      }))
    }
  }, [subSubChilds])

  console.log('CHILD', childs)
  console.log('SUB_CHILD', subChilds)
  console.log('SUB_SUB_CHILD', subSubChilds)

  return (
    <Card>
      <CardBody>
        {POST_EXPLOITED_SETTINGS.length > 0 &&
          POST_EXPLOITED_SETTINGS.map(son => (
            <div className="d-flex" key={son.value}>
              <CustomInput
                type={son.type}
                className="custom-control-success mb-2"
                id={son.value}
                inline
                checked={childs['group_list_posts'][
                  'group_post_detail'
                ].includes(son.value)}
                onChange={e =>
                  handleChild(
                    'group_list_posts',
                    'group_post_detail',
                    son.value,
                    'checkbox',
                  )
                }
              />
              <div className="mb-2">
                {son.is_show_parent ? (
                  <div
                    className="cursor-pointer"
                    onClick={() => handleShowMoreChilds(son.value)}
                  >
                    {son.label}
                    {collapseChilds.includes(son.value) ? (
                      <ChevronDown size={14} className="ml-3" />
                    ) : (
                      <ChevronRight size={14} className="ml-3" />
                    )}
                  </div>
                ) : (
                  <div>{son.label}</div>
                )}

                {/* SUBCHILD */}
                <Collapse isOpen={collapseChilds.includes(son.value)}>
                  {son.sub_childs &&
                    son.sub_childs.length > 0 &&
                    son.sub_childs.map(item => (
                      <div className="d-flex" key={item.value}>
                        <CustomInput
                          type={item.type}
                          className="custom-control-primary mt-2"
                          inline
                          checked={subChilds[son.value] === item.value}
                          id={`${son.value}_${item.value}`}
                          onChange={e => handleSubChild(son.value, item.value)}
                        />
                        <div className="mt-2">
                          {item.childs.length > 0 ? (
                            <div
                              className="cursor-pointer"
                              onClick={() =>
                                handleShowMoreChilds(
                                  `${son.value}_${item.value}`,
                                )
                              }
                            >
                              {item.label}

                              {collapseChilds.includes(item.value) ? (
                                <ChevronDown size={14} className="ml-3" />
                              ) : (
                                <ChevronRight size={14} className="ml-3" />
                              )}
                            </div>
                          ) : (
                            <div>{item.label}</div>
                          )}
                          {item.childs.length > 0 && (
                            <Collapse
                              isOpen={collapseChilds.includes(
                                `${son.value}_${item.value}`,
                              )}
                            >
                              {item.childs.map(subItem => (
                                <div className="d-flex" key={subItem.value}>
                                  <CustomInput
                                    type={subItem.type}
                                    id={`${son.value}_${item.value}_${subItem.value}`}
                                    className="custom-control-primary mt-2"
                                    inline
                                    checked={subSubChilds[son.value][
                                      item.value
                                    ].includes(subItem.value)}
                                    onChange={e =>
                                      handleSubSubChild(
                                        son.value,
                                        item.value,
                                        subItem.value,
                                      )
                                    }
                                  />
                                  <div className="mt-2">{subItem.label}</div>
                                </div>
                              ))}
                            </Collapse>
                          )}
                        </div>
                      </div>
                    ))}
                </Collapse>
              </div>
            </div>
          ))}
      </CardBody>
    </Card>
  )
}
export default PostSetting
