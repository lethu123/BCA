import React, {useEffect, useState} from 'react'
import {Card, CardBody, Col, Row} from 'reactstrap'
import CustomInput from 'reactstrap/lib/CustomInput'
import '../styles.css'

const objTree = [
  {
    id: 100,
    name: 'Thông tin cơ bản của nhóm',
    parentNode: 0,
    isRadioBox: false,
    isChecked: true,
  },
  {
    id: 101,
    name: 'Danh sách thành viên',
    parentNode: 0,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 102,
    name: 'Danh sách bài viết của nhóm',
    parentNode: 0,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 1,
    name: 'Giới hạn thời gian',
    parentNode: 102,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 2,
    name: 'Giới hạn số lượng bài viết',
    parentNode: 102,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 3,
    name: 'Chi tiết Post',
    parentNode: 102,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 4,
    name: '1 tháng',
    parentNode: 1,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 5,
    name: '3 tháng',
    parentNode: 1,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 6,
    name: '6 tháng',
    parentNode: 1,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 7,
    name: '10',
    parentNode: 2,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 8,
    name: '30',
    parentNode: 2,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 9,
    name: '50',
    parentNode: 2,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 10,
    name: '100',
    parentNode: 2,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 11,
    name: 'Người đăng',
    parentNode: 3,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 12,
    name: 'Nội dung',
    parentNode: 3,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 13,
    name: 'Thống kê tương tác',
    parentNode: 3,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 14,
    name: 'Reactors',
    parentNode: 3,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 15,
    name: 'Commentors',
    parentNode: 3,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 16,
    name: 'Name and URL only',
    parentNode: 14,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 17,
    name: 'Chi tiết profile',
    parentNode: 14,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 18,
    name: 'Thông tin cơ bản',
    parentNode: 17,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 19,
    name: 'Danh sách bạn bè',
    parentNode: 17,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 20,
    name: 'Danh sách bài viết trong trang cá nhân',
    parentNode: 17,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 21,
    name: 'Name and URL only',
    parentNode: 15,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 22,
    name: 'Chi tiết profile',
    parentNode: 15,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 23,
    name: 'Thông tin cơ bản',
    parentNode: 22,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 24,
    name: 'Danh sách bạn bè',
    parentNode: 22,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 25,
    name: 'Danh sách bài viết trong trang cá nhân',
    parentNode: 22,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 26,
    name: 'Name and URL only',
    parentNode: 101,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 27,
    name: 'Chi tiết profile',
    parentNode: 101,
    isRadioBox: true,
    isChecked: false,
  },
  {
    id: 28,
    name: 'Thông tin cơ bản',
    parentNode: 27,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 29,
    name: 'Danh sách bạn bè',
    parentNode: 27,
    isRadioBox: false,
    isChecked: false,
  },
  {
    id: 30,
    name: 'Danh sách bài viết trong trang cá nhân',
    parentNode: 27,
    isRadioBox: false,
    isChecked: false,
  },
]

const RenderNodes = React.memo(({tree, parentNodeId, onTickNode}) => {
  const listChildNodes = tree?.filter(f => f.parentNode === parentNodeId)

  if (listChildNodes) {
    return (
      <Row>
        {listChildNodes.map((item, key) => {
          return (
            <Col md={item.id === 101 || item.id === 102 ? 6 : 12} key={key}>
              {item.id === 100 || item.id === 101 || item.id === 102 ? (
                <Card>
                  <CardBody>
                    <div className="d-flex">
                      <CustomInput
                        id={item.id}
                        type={item.isRadioBox ? 'radio' : 'checkbox'}
                        value={item.isChecked}
                        onChange={() => onTickNode(item.id, item.isChecked)}
                        checked={item.isChecked}
                      />
                      <span>{item.name}</span>
                    </div>
                    <RenderNodes
                      parentNodeId={item.id}
                      tree={tree}
                      onTickNode={onTickNode}
                    />
                  </CardBody>
                </Card>
              ) : (
                <div className="ml-3">
                  <div className="d-flex my-2">
                    <CustomInput
                      id={item.id}
                      type={item.isRadioBox ? 'radio' : 'checkbox'}
                      value={item.isChecked}
                      onChange={() => onTickNode(item.id, item.isChecked)}
                      checked={item.isChecked}
                    />
                    <span>{item.name}</span>
                  </div>
                  <RenderNodes
                    parentNodeId={item.id}
                    tree={tree}
                    onTickNode={onTickNode}
                  />
                </div>
              )}
            </Col>
          )
        })}
      </Row>
    )
  }
  return null
})

const GroupExploited = () => {
  const [tree, setTree] = useState(objTree)
  useEffect(() => {
    setTree(objTree)
  }, [])

  const getListChildNode = (parentId, isChecked) => {
    if (!parentId) return
    const flattenArrChildNodes = []
    let listChildNode = tree.filter(item => item.parentNode === parentId)
    // if changing node status from uncheck -> check, active first radiobox node
    if (!isChecked) {
      listChildNode = tree.filter(
        item => item.parentNode === parentId && !item.isRadioBox,
      )
      const firstRadioNode = tree.find(
        item => item.parentNode === parentId && item.isRadioBox,
      )
      firstRadioNode && listChildNode.push(firstRadioNode)
    }
    if (listChildNode) {
      flattenArrChildNodes.push(...listChildNode)
      // get nodes in low levels
      listChildNode.map((item, key) => {
        return flattenArrChildNodes.push(
          ...getListChildNode(item.id, item.isChecked),
        )
      })
    }
    return flattenArrChildNodes
  }

  const getListParentNode = (parentId, currentNodeId, isChecked) => {
    const flattenArrParentNode = []
    const parentNode = tree.find(item => item.id === parentId)
    if (parentNode) {
      const lstNodeActiveSameLevel = getListNodeActiveSameLevel(
        currentNodeId,
        parentId,
      )
      const radioNodeActiveSameLevel = lstNodeActiveSameLevel.filter(
        f => f.isRadioBox,
      )
      // uncheck another radiobox nodes same level
      if (radioNodeActiveSameLevel && !isChecked) {
        radioNodeActiveSameLevel.map(item => onTickNode(item.id, true))
      }

      // only toggle tick status when unchecked or empty actived nodes same level
      if (
        !isChecked ||
        (isChecked &&
          lstNodeActiveSameLevel &&
          lstNodeActiveSameLevel.length < 1)
      ) {
        flattenArrParentNode.push(
          parentNode,
          ...getListParentNode(
            parentNode.parentNode,
            parentId,
            parentNode.isChecked,
          ),
        )
      }
    }
    return flattenArrParentNode
  }

  const getListNodeActiveSameLevel = (
    currentNodeId,
    parentId,
    onlyRadio = false,
  ) => {
    if (onlyRadio) {
      return tree.filter(
        item =>
          item.id !== currentNodeId &&
          item.parentNode === parentId &&
          item.isRadioBox &&
          item.isChecked,
      )
    }
    return tree.filter(
      item =>
        item.id !== currentNodeId &&
        item.parentNode === parentId &&
        item.isChecked,
    )
  }

  const onTickNode = (idNode, isChecked) => {
    if (idNode == null || idNode < 0) return
    const infoNode = tree.find(item => item.id === idNode)
    if (!infoNode) return
    let newTree = tree

    //active child level nodes
    const lstChildNode = getListChildNode(idNode, isChecked)
    if (lstChildNode) {
      newTree = newTree.map(item => {
        if (lstChildNode.includes(item) || item.id === idNode)
          item.isChecked = !isChecked
        return item
      })
    }

    //active parent level nodes
    if (infoNode.parentNode) {
      const lstParentNode = getListParentNode(
        infoNode.parentNode,
        idNode,
        isChecked,
      )
      if (lstParentNode) {
        newTree = newTree.map(item => {
          if (lstParentNode.includes(item)) item.isChecked = !isChecked
          return item
        })
      }
    }

    //disactive radio nodes same level
    if (infoNode.isRadioBox && !isChecked) {
      const radioNodeActiveSameLevel = getListNodeActiveSameLevel(
        idNode,
        infoNode.parentNode,
        true,
      )
      if (radioNodeActiveSameLevel) {
        onTickNode(radioNodeActiveSameLevel.id, true)
      }
    }
    setTree(newTree)
  }
  return (
    <div className="App">
      <RenderNodes parentNodeId={0} tree={tree} onTickNode={onTickNode} />
    </div>
  )
}

export default GroupExploited
